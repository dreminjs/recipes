// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER
  ADMIN
}

enum Measure {
  ML
  L
  KG
  G
  N
}

model User {
  @@map("users")
  createdAt      DateTime         @default(now()) @map("created_at")
  id             String           @id @default(uuid())
  nickname       String
  email          String           @unique
  isActived      Boolean          @map("is_actived")
  link           String?          @unique
  role           Roles
  hashPassword   String           @map("hass_password")
  salt           String
  RefreshToken   RefreshToken[]
  Recipe         Recipe[]
  RecipeComment  RecipeComment[]
  FavoriteRecipe FavoriteRecipe[]
}

model RefreshToken {
  @@map("refresh_tokens")
  id     String @id @default(uuid())
  token  String
  user   User   @relation(references: [id], fields: [userId])
  userId String @map("user_id")
}

model Recipe {
  @@map("recipes")        
  id                String             @id @default(uuid())
  title             String
  description       String
  photo             String
  createdAt         DateTime           @default(now()) @map("created_at")
  userId            String             @map("user_id")
  user              User               @relation(references: [id], fields: [userId])
  steps             Step[]
  type              Type               @relation(fields: [typeId], references: [id])
  typeId            String             @map("type_id")
  nationalCuisine   NationalCuisine    @relation(fields: [nationalCuisineId], references: [id])
  nationalCuisineId String             @map("national_cuisine_id")
  holiday           Holiday            @relation(fields: [holidayId], references: [id])
  holidayId         String             @map("holiday_id")
  recipeComment     RecipeComment[]
  favoriteRecipe    FavoriteRecipe[]
  recipeIngredient  RecipeIngredient[]
}

model NationalCuisine {
  @@map("national_cuisines")
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  recipe    Recipe[]
}

model Type {
  @@map("types")
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  recipe    Recipe[]
}

model Holiday {
  @@map("holidays")
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  recipe    Recipe[]
}

model RecipeComment {
  @@map("recipe_comments")
  createdAt       DateTime        @default(now()) @map("created_at")
  id              String          @id @default(uuid())
  content         String
  userId          String          @map("user_id")
  user            User            @relation(references: [id], fields: [userId])
  recipeId        String          @map("recipe_id")
  recipe          Recipe          @relation(references: [id], fields: [recipeId])
  recipeCommentId String?         @map("recipe_comment_id")
  recipeComment   RecipeComment?  @relation("RecipeComments", fields: [recipeCommentId], references: [id])
  replies         RecipeComment[] @relation("RecipeComments")
}

model FavoriteRecipe {
  @@map("favorite_recipes")
  createdAt DateTime @default(now()) @map("created_at")
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(references: [id], fields: [userId])
  recipeId  String   @map("recipe_id")
  recipe    Recipe   @relation(references: [id], fields: [recipeId])
}

model Ingredient {
  @@map("ingredients")
  id               String             @id @default(uuid())
  title            String
  isVisible        Boolean            @default(true) @map("is_visible")
  measure          Measure
  RecipeIngredient RecipeIngredient[]
  createdAt        DateTime           @default(now()) @map("created_at")
}

model Step {
  @@map("steps")
  createdAt DateTime @default(now()) @map("created_at")
  id        String   @id @default(uuid())
  content   String
  recipeId  String   @map("recipe_id")
  recipe    Recipe   @relation(references: [id], fields: [recipeId])
}

model RecipeIngredient {
  @@map("recipe_ingredients")
  id           String     @id @default(uuid())
  ingredient   Ingredient @relation(references: [id], fields: [ingredientId])
  count        Int
  ingredientId String
  recipeId     String     @map("recipe_id")
  recipe       Recipe     @relation(references: [id], fields: [recipeId])
  createdAt    DateTime   @default(now()) @map("created_at")
}

model IngredientRequest {
  @@map("ingredient_requests")
  id        String   @id @default(uuid())
  title     String
  measure   Measure
  createdAt DateTime @default(now()) @map("created_at")
}
