// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER
  ADMIN
}

model User {
  id             String           @id @default(uuid())
  nickname       String
  email          String           @unique
  isActived      Boolean
  link           String?          @unique
  role           Roles
  hashPassword   String
  salt           String
  RefreshToken   RefreshToken[]
  Recipe         Recipe[]
  RecipeComment  RecipeComment[]
  FavoriteRecipe FavoriteRecipe[]
}

model RefreshToken {
  id     String @id @default(uuid())
  token  String
  user   User   @relation(references: [id], fields: [userId])
  userId String
}

model Recipe {
  id                String           @id @default(uuid())
  title             String
  description       String
  photo             String
  userId            String
  user              User             @relation(references: [id], fields: [userId])
  ingredients       Ingredient[]
  steps             Step[]
  type              Type             @relation(fields: [typeId], references: [id])
  typeId            String
  nationalCuisine   NationalCuisine  @relation(fields: [nationalCuisineId], references: [id])
  nationalCuisineId String
  holiday           Holiday          @relation(fields: [holidayId], references: [id])
  holidayId         String
  RecipeComment     RecipeComment[]
  FavoriteRecipe    FavoriteRecipe[]
}

model Ingredient {
  id       String @id @default(uuid())
  title    String
  recipeId String
  recipe   Recipe @relation(references: [id], fields: [recipeId])
}

model Step {
  id       String @id @default(uuid())
  content  String
  recipeId String
  recipe   Recipe @relation(references: [id], fields: [recipeId])
}

model NationalCuisine {
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true)
  recipe    Recipe[]
}

model Type {
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true)
  recipe    Recipe[]
}

model Holiday {
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true)
  recipe    Recipe[]
}

model RecipeComment {
  id              String          @id @default(uuid())
  content         String
  userId          String
  user            User            @relation(references: [id], fields: [userId])
  recipeId        String
  recipe          Recipe          @relation(references: [id], fields: [recipeId])
  recipeCommentId String?
  recipeComment   RecipeComment?  @relation("RecipeComments", fields: [recipeCommentId], references: [id])
  RecipeComment   RecipeComment[] @relation("RecipeComments")
}

model FavoriteRecipe {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(references: [id], fields: [userId])
  recipeId String
  recipe   Recipe @relation(references: [id], fields: [recipeId])
}
