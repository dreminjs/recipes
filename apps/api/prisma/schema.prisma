
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum Roles {
  USER
  ADMIN
}

enum Measure {
  ML
  L
  KG
  G
  N
}

model User {
  createdAt          DateTime            @default(now()) @map("created_at")
  id                 String              @id @default(uuid())
  nickname           String
  email              String              @unique
  isActived          Boolean?            @map("is_actived")
  link               String?             @unique
  role               Roles
  hashPassword       String              @map("hass_password")
  salt               String
  twoFactorSecret    String?             @map("two_factor_secret")
  isTwoFactorEnabled Boolean?            @default(false) @map("is_two_factor_enabled")
  RefreshToken       RefreshToken?
  Recipe             Recipe[]
  RecipeComment      RecipeComment[]
  FavoriteRecipe     FavoriteRecipe[]
  PasswordResetToken PasswordResetToken?
  TwoFaResetToken    TwoFaResetToken[]

  @@map("users")
}

model RefreshToken {
  id     String @id @default(uuid())
  token  String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("refresh_tokens")
}

model Recipe {
  id                String             @id @default(uuid())
  title             String
  description       String
  photos            String[]
  createdAt         DateTime           @default(now()) @map("created_at")
  userId            String             @map("user_id")
  user              User               @relation(references: [id], fields: [userId], onDelete: Cascade)
  steps             Step[]
  type              Type               @relation(fields: [typeId], references: [id])
  typeId            String             @map("type_id")
  nationalCuisine   NationalCuisine    @relation(fields: [nationalCuisineId], references: [id])
  nationalCuisineId String             @map("national_cuisine_id")
  holiday           Holiday            @relation(fields: [holidayId], references: [id])
  holidayId         String             @map("holiday_id")
  recipeComment     RecipeComment[]
  favoriteRecipe    FavoriteRecipe[]
  recipeIngredient  RecipeIngredient[]
  @@map("recipes")
}

model NationalCuisine {
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  recipe    Recipe[]

  @@map("national_cuisines")
}

model Type {
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  recipe    Recipe[]

  @@map("types")
}

model Holiday {
  id        String   @id @default(uuid())
  title     String   @unique
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  recipe    Recipe[]

  @@map("holidays")
}

model RecipeComment {
  createdAt       DateTime        @default(now()) @map("created_at")
  id              String          @id @default(uuid())
  content         String
  userId          String          @map("user_id")
  user            User            @relation(references: [id], fields: [userId], onDelete: Cascade)
  recipeId        String          @map("recipe_id")
  recipe          Recipe          @relation(references: [id], fields: [recipeId], onDelete: Cascade)
  recipeCommentId String?         @map("recipe_comment_id")
  recipeComment   RecipeComment?  @relation("RecipeComments", fields: [recipeCommentId], references: [id])
  replies         RecipeComment[] @relation("RecipeComments")

  @@map("recipe_comments")
}

model FavoriteRecipe {
  createdAt DateTime @default(now()) @map("created_at")
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  recipeId  String   @map("recipe_id")
  recipe    Recipe   @relation(references: [id], fields: [recipeId])

  @@map("favorite_recipes")
}

model Ingredient {
  id               String             @id @default(uuid())
  title            String
  isVisible        Boolean            @default(true) @map("is_visible")
  measure          Measure
  RecipeIngredient RecipeIngredient[]
  createdAt        DateTime           @default(now()) @map("created_at")

  @@map("ingredients")
}

model Step {
  createdAt DateTime @default(now()) @map("created_at")
  id        String   @id @default(uuid())
  content   String
  index     Int
  recipeId  String   @map("recipe_id")
  recipe    Recipe   @relation(references: [id], fields: [recipeId])

  @@map("steps")
}

model RecipeIngredient {
  id           String     @id @default(uuid())
  ingredient   Ingredient @relation(references: [id], fields: [ingredientId])
  count        Int
  ingredientId String
  recipeId     String     @map("recipe_id")
  recipe       Recipe     @relation(references: [id], fields: [recipeId])
  createdAt    DateTime   @default(now()) @map("created_at")

  @@map("recipe_ingredients")
}

model IngredientRequest {
  id        String   @id @default(uuid())
  title     String
  measure   Measure
  createdAt DateTime @default(now()) @map("created_at")

  @@map("ingredient_requests")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId])
  userId    String   @unique

  @@map("password_reset_tokens")
}

model TwoFaResetToken {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId])
  userId    String   @unique

  @@map("two_fa_reset_tokens")
}
